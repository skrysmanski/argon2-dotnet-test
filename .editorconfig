#################################################################################
#
# Editor Configurations
#
# For details, see: https://editorconfig.org/#file-format-details
#
# For Visual Studio additions, see: https://aka.ms/editorconfigdocs
#
#################################################################################

root = true

#
# All files
#
[*]
# For reasoning about encoding, see: https://github.com/skrysmanski/base/blob/master/docs/utf8-and-bom.md
charset = utf-8

end_of_line = lf

indent_style = space
indent_size = 4

trim_trailing_whitespace = true
insert_final_newline = true


#
# Markdown
#
[*.md]
charset = utf-8-bom

# For explanation why spaces are used for Markdown, see: https://github.com/skrysmanski/base/blob/master/docs/markdown-indentation.md
indent_style = space
indent_size = 4


#
# Windows batch files
#
[*.{bat,cmd}]
end_of_line = crlf


#
# C# files
#
[*.cs]
charset = utf-8-bom

# Unfortunately, Visual Studio doesn't enforce the end-of-line style on save. This
# can easily lead to mixed line endings. Also both Visual Studio and ReSharper
# have (had) issues of creating mixed line endings when not using crlf. So we'll use
# crlf here (since most development will happen in Visual Studio on Windows).
# See also: https://youtrack.jetbrains.com/issue/RSRP-478837
end_of_line = crlf

dotnet_style_qualification_for_field = true:suggestion
dotnet_style_qualification_for_property = true:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = true:suggestion

dotnet_sort_system_directives_first = true:suggestion
dotnet_separate_import_directive_groups = true:suggestion

#
# Code analysis rules
#
# For each rule, see: https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/caXXXX
#
# The FxCop project: https://github.com/dotnet/roslyn-analyzers
#
# TODO: This section can be moved to a central place once https://github.com/dotnet/roslyn/issues/47707 is implemented
#

# CA1031: Do not catch general exception types
# Reason: There are lots of places (especially in reusable library code) that make catching "Exception"
#   necessary/useful. In my experience with this rule, it's suppressed 99% of the time - making it more of
#   an annoyance than a helpful rule.
dotnet_diagnostic.CA1031.severity = none

# CA1032: Implement standard exception constructors
# Reason: This rule does not provide any real benefit but on the other hand limits the code design unnecessarily.
dotnet_diagnostic.CA1032.severity = none

# CA1040: Avoid empty interfaces
# Reason: This rule does not provide any real benefit but on the other hand limits the code design unnecessarily.
dotnet_diagnostic.CA1040.severity = none

# CA1707: Identifiers should not contain underscores
# Reason: Our style guide uses underscores for constants.
dotnet_diagnostic.CA1707.severity = none

# CA1717: Only FlagsAttribute enums should have plural names
# Reason: That's a matter of preference. On the other hand, allowing plural enum name resolves name conflicts if
#   the enum is a nested enum and there's a property for that enum in the outer class.
dotnet_diagnostic.CA1717.severity = none

# CA2225: Operator overloads have named alternates
# Reason: This rule is "nice" but makes writing operators more cumbersome. The primary reason for this rule
#   is "It's provided for developers who program in languages that do not support overloaded operators." but
#   we don't really care about these language (whatever they are).
dotnet_diagnostic.CA2225.severity = none


#
# VS project files
#
[*.csproj]
# This is how Visual Studio creates project files.
indent_size = 2

# Unfortunately, Visual Studio seems to ignore the end-of-line style for .csproj
# files - and always creates .csproj files with crlf. Thus, we enforce the end-of-line
# characters in .gitattributes instead.
end_of_line = unset


#
# .props files
#
[*.props]
# This mirrors the indent size for .csproj files.
indent_size = 2


#
# ReSharper settings files
#
[*.DotSettings]
indent_style = tab
